import {
    Scene,
    Mesh,
    MeshLambertMaterial,
    Vector3,
    BufferAttribute,
    DoubleSide,
    BufferGeometry,
    ShaderMaterial,
    MeshBasicMaterial,
} from 'three'
import { HeightGenerator } from './HeightGenerator'
import { WaterManager } from './WaterManager'
import { BiomeType, BiomeTypeValue, BiomeManager } from '@/biomes/BiomeManager'
import { ShaderManager } from '@/shaders/ShaderManager'
import { globalProfiler } from '@/utils/Profiler'
import { ChunkWorkerPool } from './ChunkWorkerPool'
import { ChunkStateManager, ChunkState } from './ChunkStateManager'
import { ChunkGenerationRequest, ChunkGenerationResult } from './ChunkWorker'

interface TerrainChunk {
    mesh: Mesh
    position: { x: number; z: number }
    geometry: BufferGeometry
    material: ShaderMaterial
    wireframeMaterial: MeshBasicMaterial
}

export class ChunkManager {
    private scene: Scene
    private chunks: Map<string, TerrainChunk> = new Map()
    private heightGenerator: HeightGenerator
    private waterManager: WaterManager
    private biomeManager: BiomeManager
    private shaderManager: ShaderManager
    private chunkSize = 100
    private chunkResolution = 64
    private wireframeEnabled = false

    // –°–∏—Å—Ç–µ–º–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
    private workerPool: ChunkWorkerPool
    private stateManager: ChunkStateManager
    private isWorkerSystemEnabled = true // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π
    private maxConcurrentGenerations = 2 // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private processingInterval: number | null = null
    private lastCameraUpdate = 0 // –î–ª—è throttling –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–º–µ—Ä—ã

    constructor(
        scene: Scene,
        heightGenerator: HeightGenerator,
        waterManager: WaterManager,
        biomeManager: BiomeManager,
        shaderManager: ShaderManager
    ) {
        this.scene = scene
        this.heightGenerator = heightGenerator
        this.waterManager = waterManager
        this.biomeManager = biomeManager
        this.shaderManager = shaderManager

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –≤–æ—Ä–∫–µ—Ä–æ–≤
        this.stateManager = new ChunkStateManager()
        this.workerPool = new ChunkWorkerPool({
            maxWorkers: navigator.hardwareConcurrency || 4,
            workerScript: './ChunkWorker.ts',
        })

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        this.initializeWorkerSystem().catch(error => {
            console.warn('Failed to initialize worker system in constructor:', error)
            this.isWorkerSystemEnabled = false
        })
    }

    async initializeWorkerSystem(): Promise<void> {
        if (!this.isWorkerSystemEnabled) {
            console.log('üñ•Ô∏è Worker system disabled, using CPU generation')
            return
        }

        try {
            console.log('üîÑ Initializing chunk worker system...')
            await this.workerPool.initialize()

            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞–Ω–∫–æ–≤ –∫–∞–∂–¥—ã–µ 150–º—Å –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            this.processingInterval = window.setInterval(() => {
                this.processChunkQueue()
            }, 150)

            console.log('‚úÖ Chunk worker system initialized successfully')
            console.log('üìä Worker system stats on startup:', this.getWorkerStats())
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to initialize worker system, falling back to CPU generation:', error)
            this.isWorkerSystemEnabled = false

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            this.stateManager = new ChunkStateManager()
        }
    }

    // –ì—Ä—É–ø–ø–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤ —Å –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥–æ–º
    generateChunks(chunks: Array<{ x: number; z: number }>): void {
        if (chunks.length === 0) return

        if (this.isWorkerSystemEnabled) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤–æ—Ä–∫–µ—Ä–æ–≤
            for (const chunk of chunks) {
                this.stateManager.addChunk(chunk.x, chunk.z, ChunkState.PENDING)
            }
            return
        }

        // Legacy –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const geometryStartTime = performance.now()
        let geometryChunks = 0

        globalProfiler.startStep('üìê Geometry Generation')
        const generatedGeometry: Map<string, { x: number; z: number; data: any }> = new Map()

        for (const chunk of chunks) {
            if (!this.chunks.has(`${chunk.x},${chunk.z}`)) {
                const geometryData = this.generateChunkGeometry(chunk.x, chunk.z)
                generatedGeometry.set(`${chunk.x},${chunk.z}`, { x: chunk.x, z: chunk.z, data: geometryData })
                geometryChunks++
            }
        }
        globalProfiler.endStep()

        const materialStartTime = performance.now()
        let materialChunks = 0

        globalProfiler.startStep('üé® Materials & Meshes')
        for (const [key, chunkInfo] of generatedGeometry) {
            this.createChunkMesh(chunkInfo.x, chunkInfo.z, chunkInfo.data)
            materialChunks++
        }
        globalProfiler.endStep()

        const waterStartTime = performance.now()
        let waterChunks = 0

        globalProfiler.startStep('üíß Water Generation')
        for (const chunk of chunks) {
            const chunkKey = `${chunk.x},${chunk.z}`
            if (this.chunks.has(chunkKey)) {
                this.waterManager.createWaterSurface(chunk.x, chunk.z, this.chunkSize)
                waterChunks++
            }
        }
        globalProfiler.endStep()

        console.log(
            `üîß Chunk batch processed: ${geometryChunks} geometry, ${materialChunks} materials, ${waterChunks} water`
        )
    }

    private generateChunkGeometry(
        chunkX: number,
        chunkZ: number
    ): { vertices: Float32Array; indices: Uint32Array; colors: Float32Array } {
        const chunkKey = `${chunkX},${chunkZ}`

        if (this.chunks.has(chunkKey)) {
            return { vertices: new Float32Array(), indices: new Uint32Array(), colors: new Float32Array() }
        }

        // –°–æ–∑–¥–∞—ë–º vertices –∏ colors –º–∞—Å—Å–∏–≤—ã —Å –Ω—É–ª—è
        const vertices: number[] = []
        const indices: number[] = []
        const colors: number[] = []

        // –°–æ–∑–¥–∞—ë–º vertices —Å–µ—Ç–∫—É
        for (let z = 0; z <= this.chunkResolution; z++) {
            for (let x = 0; x <= this.chunkResolution; x++) {
                // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ chunk (-50 –¥–æ +50 –¥–ª—è chunkSize=100)
                const localX = (x / this.chunkResolution - 0.5) * this.chunkSize
                const localZ = (z / this.chunkResolution - 0.5) * this.chunkSize

                // –ú–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                const worldX = localX + chunkX * this.chunkSize
                const worldZ = localZ + chunkZ * this.chunkSize

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è —à—É–º
                const height = this.heightGenerator.generateHeight(worldX, worldZ)

                // –°–æ–∑–¥–∞—ë–º vertices –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (Y –≤–≤–µ—Ä—Ö)
                vertices.push(localX, height, localZ)

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∏–æ–º –∏ —Ü–≤–µ—Ç
                const biome = this.determineBiome(worldX, worldZ, height)
                const color = this.biomeManager.getBiomeColor(biome, height)

                colors.push(color.r, color.g, color.b)
            }
        }

        // –°–æ–∑–¥–∞—ë–º indices –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        for (let z = 0; z < this.chunkResolution; z++) {
            for (let x = 0; x < this.chunkResolution; x++) {
                const a = z * (this.chunkResolution + 1) + x
                const b = z * (this.chunkResolution + 1) + x + 1
                const c = (z + 1) * (this.chunkResolution + 1) + x
                const d = (z + 1) * (this.chunkResolution + 1) + x + 1

                // –î–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ quad (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –Ω–æ—Ä–º–∞–ª–µ–π)
                indices.push(a, c, b)
                indices.push(b, c, d)
            }
        }

        return {
            vertices: new Float32Array(vertices),
            indices: new Uint32Array(indices),
            colors: new Float32Array(colors),
        }
    }

    private createChunkMesh(
        chunkX: number,
        chunkZ: number,
        geometryData?: { vertices: Float32Array; indices: Uint32Array; colors: Float32Array }
    ): void {
        const chunkKey = `${chunkX},${chunkZ}`

        if (this.chunks.has(chunkKey)) return

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ
        const data = geometryData || this.generateChunkGeometry(chunkX, chunkZ)

        // –°–æ–∑–¥–∞—ë–º geometry —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const geometry = new BufferGeometry()
        geometry.setAttribute('position', new BufferAttribute(data.vertices, 3))
        geometry.setAttribute('color', new BufferAttribute(data.colors, 3))
        geometry.setIndex(Array.from(data.indices))
        geometry.computeVertexNormals()

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–µ–π–¥–µ—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤–º–µ—Å—Ç–æ MeshLambertMaterial
        const material = this.shaderManager.createNewTerrainMaterial()

        // –ü—Ä–∏–º–µ–Ω—è–µ–º wireframe –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
        material.wireframe = this.wireframeEnabled

        const mesh = new Mesh(geometry, material)
        mesh.position.set(chunkX * this.chunkSize, 0, chunkZ * this.chunkSize)
        mesh.receiveShadow = true
        mesh.castShadow = false

        this.scene.add(mesh)

        // –°–æ–∑–¥–∞–µ–º wireframe –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ç–µ—Ä—Ä–µ–π–Ω–∞ (—á–µ—Ä–Ω—ã–π)
        const wireframeMaterial = new MeshBasicMaterial({
            color: 0x000000,
            wireframe: true,
        })

        // –ï—Å–ª–∏ wireframe —É–∂–µ –≤–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º wireframe –º–∞—Ç–µ—Ä–∏–∞–ª
        if (this.wireframeEnabled) {
            ;(mesh as any).material = wireframeMaterial
        }

        const chunk: TerrainChunk = {
            mesh,
            position: { x: chunkX, z: chunkZ },
            geometry,
            material,
            wireframeMaterial,
        }

        this.chunks.set(chunkKey, chunk)
    }

    private determineBiome(x: number, z: number, height: number): BiomeTypeValue {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º heightGenerator –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à—É–º–æ–≤
        const moisture = this.heightGenerator.getNoise2D(x * 0.01, z * 0.01)
        const temperature = this.heightGenerator.getNoise2D((x + 1000) * 0.008, (z + 1000) * 0.008)

        // Water - –¥–ª—è —Ç–æ—á–µ–∫ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –≤–æ–¥—ã (0)
        if (height < 0) return BiomeType.WATER

        // Beach/Sand - —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 35% –¥–µ–ª–∞—è —É—Å–ª–æ–≤–∏—è –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏
        if (height < 1 || (moisture > 0.3 && temperature > 0.1 && height < 3)) return BiomeType.SAND

        // Mountain/Rocks - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä, —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥
        if (height > 15) return BiomeType.ROCKS

        // Forest - –¥–µ–ª–∞–µ–º –ª–µ—Å–∞ –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º–∏ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö –≤—ã—Å–æ—Ç–∞—Ö
        if (moisture > -0.1 && temperature > -0.5 && height > 4 && height < 18) return BiomeType.FOREST

        // Fields - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–≤–Ω–∏–Ω—ã –∑–∞–Ω–∏–º–∞—é—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞
        return BiomeType.FIELDS
    }

    removeChunk(chunkKey: string): void {
        const chunk = this.chunks.get(chunkKey)
        if (!chunk) return

        // Remove water surface
        this.waterManager.removeWaterSurface(chunkKey)

        // Remove chunk mesh
        this.scene.remove(chunk.mesh)
        chunk.geometry.dispose()

        // –£–¥–∞–ª—è–µ–º –æ–±–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        this.shaderManager.removeMaterial(chunk.material)
        chunk.material.dispose()
        chunk.wireframeMaterial.dispose()

        this.chunks.delete(chunkKey)
    }

    getChunks(): Map<string, TerrainChunk> {
        return this.chunks
    }

    setWireframe(enabled: boolean): void {
        this.wireframeEnabled = enabled
        this.chunks.forEach(chunk => {
            if (enabled) {
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ wireframe –º–∞—Ç–µ—Ä–∏–∞–ª
                ;(chunk.mesh as any).material = chunk.wireframeMaterial
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
                ;(chunk.mesh as any).material = chunk.material
            }
        })
        this.biomeManager.setWireframe(enabled)
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    setRenderRadius(radius: number): void {
        if (this.stateManager) {
            this.stateManager.setRenderRadius(radius)
            console.log(`üîß Render radius updated to ${radius} chunks`)
        }
    }

    getRenderRadius(): number {
        return this.stateManager ? this.stateManager.getRenderRadius() : 3
    }

    dispose(): void {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤–æ—Ä–∫–µ—Ä–æ–≤
        if (this.processingInterval) {
            clearInterval(this.processingInterval)
            this.processingInterval = null
        }

        if (this.workerPool) {
            this.workerPool.dispose()
        }

        this.chunks.forEach((chunk, key) => {
            this.removeChunk(key)
        })
        this.chunks.clear()
    }

    // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏

    updateCameraPosition(x: number, z: number): void {
        const now = Date.now()
        if (now - this.lastCameraUpdate < 100) return // Throttle –¥–æ 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É

        this.lastCameraUpdate = now
        const chunkX = Math.floor(x / this.chunkSize)
        const chunkZ = Math.floor(z / this.chunkSize)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —á–∞–Ω–∫–∏)
        this.stateManager.updateCenter(chunkX, chunkZ)

        // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø—É–ª–µ –≤–æ—Ä–∫–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        if (this.isWorkerSystemEnabled && this.workerPool) {
            const renderRadius = this.stateManager.getRenderRadius()
            const cancelledTasks = this.workerPool.cancelOutOfRangeTasks(chunkX, chunkZ, renderRadius + 1)

            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∏–ª–∏ –º–Ω–æ–≥–æ –∑–∞–¥–∞—á
            if (cancelledTasks > 5) {
                console.log(`üö´ Cancelled ${cancelledTasks} out-of-range worker tasks`)
            }
        }
    }

    private async processChunkQueue(): Promise<void> {
        if (!this.isWorkerSystemEnabled) return

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏
        this.processReadyChunks()

        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await this.startNewGenerations()
    }

    private processReadyChunks(): void {
        const readyChunks = this.stateManager.getReadyChunks()
        const maxMeshesPerFrame = 1 // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ 1 –º–µ—à –∑–∞ –∫–∞–¥—Ä –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        let processedCount = 0

        for (const chunkInfo of readyChunks) {
            if (processedCount >= maxMeshesPerFrame) break
            if (!chunkInfo.geometryData) continue

            try {
                this.createChunkMeshFromWorkerData(chunkInfo.geometryData)
                this.stateManager.setChunkState(chunkInfo.x, chunkInfo.z, ChunkState.RENDERED)

                // –°–æ–∑–¥–∞—ë–º –≤–æ–¥—É –¥–ª—è —á–∞–Ω–∫–∞
                this.waterManager.createWaterSurface(chunkInfo.x, chunkInfo.z, this.chunkSize)

                processedCount++
            } catch (error) {
                console.error(`‚ùå Failed to create mesh for chunk ${chunkInfo.key}:`, error)
                this.stateManager.setChunkState(chunkInfo.x, chunkInfo.z, ChunkState.PENDING)
            }
        }
    }

    private async startNewGenerations(): Promise<void> {
        const pendingChunks = this.stateManager.getPendingChunks()
        const generatingCount = this.stateManager.getGeneratingChunks().length

        const availableSlots = this.maxConcurrentGenerations - generatingCount
        const chunksToGenerate = pendingChunks.slice(0, availableSlots)

        for (const chunkInfo of chunksToGenerate) {
            try {
                const generationId = `${chunkInfo.key}_${Date.now()}`

                const request: ChunkGenerationRequest = {
                    id: generationId,
                    chunkX: chunkInfo.x,
                    chunkZ: chunkInfo.z,
                    chunkSize: this.chunkSize,
                    chunkResolution: this.chunkResolution,
                    heightGeneratorConfig: {
                        seed: this.heightGenerator.getSeed(),
                        scale: this.heightGenerator.getScale(),
                        heightScale: this.heightGenerator.getHeightScale(),
                        octaves: 6,
                        persistence: 0.5,
                        lacunarity: 2.0,
                    },
                }

                this.stateManager.setChunkState(chunkInfo.x, chunkInfo.z, ChunkState.GENERATING, generationId)

                // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –≤–æ—Ä–∫–µ—Ä–µ
                const result = await this.workerPool.generateChunk(request)

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞–Ω–∫ –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω (–º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –ø–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è)
                const currentState = this.stateManager.getChunkState(chunkInfo.x, chunkInfo.z)
                if (currentState === ChunkState.GENERATING) {
                    this.stateManager.setChunkState(chunkInfo.x, chunkInfo.z, ChunkState.READY, result)
                }
            } catch (error) {
                console.error(`‚ùå Chunk generation failed for ${chunkInfo.key}:`, error)
                this.stateManager.setChunkState(chunkInfo.x, chunkInfo.z, ChunkState.PENDING)
            }
        }
    }

    private createChunkMeshFromWorkerData(result: ChunkGenerationResult): void {
        const chunkKey = `${result.chunkX},${result.chunkZ}`

        if (this.chunks.has(chunkKey)) {
            return // –ß–∞–Ω–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        }

        // –°–æ–∑–¥–∞—ë–º geometry —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
        const geometry = new BufferGeometry()
        geometry.setAttribute('position', new BufferAttribute(result.vertices, 3))
        geometry.setAttribute('color', new BufferAttribute(result.colors, 3))
        geometry.setIndex(Array.from(result.indices))

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        requestAnimationFrame(() => {
            geometry.computeVertexNormals()

            // –°–æ–∑–¥–∞—ë–º –º–∞—Ç–µ—Ä–∏–∞–ª
            const material = this.shaderManager.createNewTerrainMaterial()
            material.wireframe = this.wireframeEnabled

            const mesh = new Mesh(geometry, material)
            mesh.position.set(result.chunkX * this.chunkSize, 0, result.chunkZ * this.chunkSize)
            mesh.receiveShadow = true
            mesh.castShadow = false

            this.scene.add(mesh)

            // –°–æ–∑–¥–∞–µ–º wireframe –º–∞—Ç–µ—Ä–∏–∞–ª
            const wireframeMaterial = new MeshBasicMaterial({
                color: 0x000000,
                wireframe: true,
            })

            if (this.wireframeEnabled) {
                ;(mesh as any).material = wireframeMaterial
            }

            const chunk: TerrainChunk = {
                mesh,
                position: { x: result.chunkX, z: result.chunkZ },
                geometry,
                material,
                wireframeMaterial,
            }

            this.chunks.set(chunkKey, chunk)
        })
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    generateChunk(chunkX: number, chunkZ: number): void {
        if (this.isWorkerSystemEnabled) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤–æ—Ä–∫–µ—Ä–æ–≤
            this.stateManager.addChunk(chunkX, chunkZ, ChunkState.PENDING)
        } else {
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            this.generateChunkLegacy(chunkX, chunkZ)
        }
    }

    private generateChunkLegacy(chunkX: number, chunkZ: number): void {
        const chunkKey = `${chunkX},${chunkZ}`

        if (this.chunks.has(chunkKey)) {
            return
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥–∞
        const geometryData = this.generateChunkGeometry(chunkX, chunkZ)
        this.createChunkMesh(chunkX, chunkZ, geometryData)

        // –°–æ–∑–¥–∞—ë–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –≤–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ chunk
        this.waterManager.createWaterSurface(chunkX, chunkZ, this.chunkSize)
    }

    getWorkerStats(): {
        workerPool: any
        stateManager: any
    } {
        return {
            workerPool: this.workerPool?.getStats() || null,
            stateManager: this.stateManager?.getStats() || null,
        }
    }
}
