import {
    Scene,
    Mesh,
    MeshLambertMaterial,
    Vector3,
    BufferAttribute,
    DoubleSide,
    BufferGeometry,
    ShaderMaterial,
    MeshBasicMaterial,
} from 'three'
import { HeightGenerator } from './HeightGenerator'
import { WaterManager } from './WaterManager'
import { BiomeType, BiomeTypeValue, BiomeManager } from '@/biomes/BiomeManager'
import { ShaderManager } from '@/shaders/ShaderManager'
import { globalProfiler } from '@/utils/Profiler'

interface TerrainChunk {
    mesh: Mesh
    position: { x: number; z: number }
    geometry: BufferGeometry
    material: ShaderMaterial
    wireframeMaterial: MeshBasicMaterial
}

export class ChunkManager {
    private scene: Scene
    private chunks: Map<string, TerrainChunk> = new Map()
    private heightGenerator: HeightGenerator
    private waterManager: WaterManager
    private biomeManager: BiomeManager
    private shaderManager: ShaderManager
    private chunkSize = 100
    private chunkResolution = 64
    private wireframeEnabled = false

    constructor(
        scene: Scene,
        heightGenerator: HeightGenerator,
        waterManager: WaterManager,
        biomeManager: BiomeManager,
        shaderManager: ShaderManager
    ) {
        this.scene = scene
        this.heightGenerator = heightGenerator
        this.waterManager = waterManager
        this.biomeManager = biomeManager
        this.shaderManager = shaderManager
    }
    generateChunk(chunkX: number, chunkZ: number): void {
        const chunkKey = `${chunkX},${chunkZ}`

        if (this.chunks.has(chunkKey)) {
            return
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥–∞
        this.generateChunkGeometry(chunkX, chunkZ)
        this.createChunkMesh(chunkX, chunkZ)

        // –°–æ–∑–¥–∞—ë–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –≤–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ chunk
        this.waterManager.createWaterSurface(chunkX, chunkZ, this.chunkSize)
        this.waterManager.createWaterSurfaceAdvanced(chunkX, chunkZ, this.chunkSize)
        this.recheckAdjacentWater(chunkX, chunkZ)
    }

    // –ì—Ä—É–ø–ø–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤ —Å –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥–æ–º
    generateChunks(chunks: Array<{ x: number; z: number }>): void {
        if (chunks.length === 0) return

        const geometryStartTime = performance.now()
        let geometryChunks = 0

        globalProfiler.startStep('üìê Geometry Generation')
        for (const chunk of chunks) {
            if (!this.chunks.has(`${chunk.x},${chunk.z}`)) {
                this.generateChunkGeometry(chunk.x, chunk.z)
                geometryChunks++
            }
        }
        globalProfiler.endStep()

        const materialStartTime = performance.now()
        let materialChunks = 0

        globalProfiler.startStep('üé® Materials & Meshes')
        for (const chunk of chunks) {
            const chunkKey = `${chunk.x},${chunk.z}`
            if (this.pendingChunks.has(chunkKey)) {
                this.createChunkMesh(chunk.x, chunk.z)
                materialChunks++
            }
        }
        globalProfiler.endStep()

        const waterStartTime = performance.now()
        let waterChunks = 0

        globalProfiler.startStep('üíß Water Generation')
        for (const chunk of chunks) {
            const chunkKey = `${chunk.x},${chunk.z}`
            if (this.chunks.has(chunkKey)) {
                this.waterManager.createWaterSurface(chunk.x, chunk.z, this.chunkSize)
                this.waterManager.createWaterSurfaceAdvanced(chunk.x, chunk.z, this.chunkSize)
                this.recheckAdjacentWater(chunk.x, chunk.z)
                waterChunks++
            }
        }
        globalProfiler.endStep()

        console.log(
            `üîß Chunk batch processed: ${geometryChunks} geometry, ${materialChunks} materials, ${waterChunks} water`
        )
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —á–∞–Ω–∫–æ–≤
    private pendingChunks: Map<
        string,
        {
            vertices: Float32Array
            indices: Uint32Array
            colors: Float32Array
            position: { x: number; z: number }
        }
    > = new Map()

    private generateChunkGeometry(chunkX: number, chunkZ: number): void {
        const chunkKey = `${chunkX},${chunkZ}`

        if (this.chunks.has(chunkKey) || this.pendingChunks.has(chunkKey)) {
            return
        }

        // –°–æ–∑–¥–∞—ë–º vertices –∏ colors –º–∞—Å—Å–∏–≤—ã —Å –Ω—É–ª—è
        const vertices: number[] = []
        const indices: number[] = []
        const colors: number[] = []

        // –°–æ–∑–¥–∞—ë–º vertices —Å–µ—Ç–∫—É
        for (let z = 0; z <= this.chunkResolution; z++) {
            for (let x = 0; x <= this.chunkResolution; x++) {
                // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ chunk (-50 –¥–æ +50 –¥–ª—è chunkSize=100)
                const localX = (x / this.chunkResolution - 0.5) * this.chunkSize
                const localZ = (z / this.chunkResolution - 0.5) * this.chunkSize

                // –ú–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                const worldX = localX + chunkX * this.chunkSize
                const worldZ = localZ + chunkZ * this.chunkSize

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è —à—É–º
                const height = this.heightGenerator.generateHeight(worldX, worldZ)

                // –°–æ–∑–¥–∞—ë–º vertices –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (Y –≤–≤–µ—Ä—Ö)
                vertices.push(localX, height, localZ)

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∏–æ–º –∏ —Ü–≤–µ—Ç
                const biome = this.determineBiome(worldX, worldZ, height)
                const color = this.biomeManager.getBiomeColor(biome, height)

                colors.push(color.r, color.g, color.b)
            }
        }

        // –°–æ–∑–¥–∞—ë–º indices –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        for (let z = 0; z < this.chunkResolution; z++) {
            for (let x = 0; x < this.chunkResolution; x++) {
                const a = z * (this.chunkResolution + 1) + x
                const b = z * (this.chunkResolution + 1) + x + 1
                const c = (z + 1) * (this.chunkResolution + 1) + x
                const d = (z + 1) * (this.chunkResolution + 1) + x + 1

                // –î–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ quad (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –Ω–æ—Ä–º–∞–ª–µ–π)
                indices.push(a, c, b)
                indices.push(b, c, d)
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        this.pendingChunks.set(chunkKey, {
            vertices: new Float32Array(vertices),
            indices: new Uint32Array(indices),
            colors: new Float32Array(colors),
            position: { x: chunkX, z: chunkZ },
        })
    }

    private createChunkMesh(chunkX: number, chunkZ: number): void {
        const chunkKey = `${chunkX},${chunkZ}`
        const pendingChunk = this.pendingChunks.get(chunkKey)

        if (!pendingChunk) return

        // –°–æ–∑–¥–∞—ë–º geometry —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const geometry = new BufferGeometry()
        geometry.setAttribute('position', new BufferAttribute(pendingChunk.vertices, 3))
        geometry.setAttribute('color', new BufferAttribute(pendingChunk.colors, 3))
        geometry.setIndex(Array.from(pendingChunk.indices))
        geometry.computeVertexNormals()

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–µ–π–¥–µ—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤–º–µ—Å—Ç–æ MeshLambertMaterial
        const material = this.shaderManager.createNewTerrainMaterial()

        // –ü—Ä–∏–º–µ–Ω—è–µ–º wireframe –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
        material.wireframe = this.wireframeEnabled

        const mesh = new Mesh(geometry, material)
        mesh.position.set(chunkX * this.chunkSize, 0, chunkZ * this.chunkSize)
        mesh.receiveShadow = true
        mesh.castShadow = false

        this.scene.add(mesh)

        // –°–æ–∑–¥–∞–µ–º wireframe –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ç–µ—Ä—Ä–µ–π–Ω–∞ (—á–µ—Ä–Ω—ã–π)
        const wireframeMaterial = new MeshBasicMaterial({
            color: 0x000000,
            wireframe: true,
        })

        // –ï—Å–ª–∏ wireframe —É–∂–µ –≤–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º wireframe –º–∞—Ç–µ—Ä–∏–∞–ª
        if (this.wireframeEnabled) {
            ;(mesh as any).material = wireframeMaterial
        }

        const chunk: TerrainChunk = {
            mesh,
            position: { x: chunkX, z: chunkZ },
            geometry,
            material,
            wireframeMaterial,
        }

        this.chunks.set(chunkKey, chunk)
        this.pendingChunks.delete(chunkKey)
    }

    private recheckAdjacentWater(chunkX: number, chunkZ: number): void {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º 8 —Å–æ—Å–µ–¥–Ω–∏—Ö —á–∞–Ω–∫–æ–≤
        const adjacentChunks = [
            [chunkX - 1, chunkZ - 1],
            [chunkX, chunkZ - 1],
            [chunkX + 1, chunkZ - 1],
            [chunkX - 1, chunkZ],
            /*[chunkX, chunkZ],*/ [chunkX + 1, chunkZ],
            [chunkX - 1, chunkZ + 1],
            [chunkX, chunkZ + 1],
            [chunkX + 1, chunkZ + 1],
        ]

        for (const [adjX, adjZ] of adjacentChunks) {
            const adjKey = `${adjX},${adjZ}`
            if (this.chunks.has(adjKey)) {
                // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–æ–¥—É –¥–ª—è —Å–æ—Å–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞
                this.waterManager.createWaterSurface(adjX, adjZ, this.chunkSize)
                this.waterManager.createWaterSurfaceAdvanced(adjX, adjZ, this.chunkSize)
            }
        }
    }

    private determineBiome(x: number, z: number, height: number): BiomeTypeValue {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º heightGenerator –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à—É–º–æ–≤
        const moisture = this.heightGenerator.getNoise2D(x * 0.01, z * 0.01)
        const temperature = this.heightGenerator.getNoise2D((x + 1000) * 0.008, (z + 1000) * 0.008)

        // Water - —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º—ã—Ö –≥–ª—É–±–æ–∫–∏—Ö –≤–ø–∞–¥–∏–Ω–∞—Ö (—É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 50%)
        if (height < -4) return BiomeType.WATER

        // Beach/Sand - —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 35% –¥–µ–ª–∞—è —É—Å–ª–æ–≤–∏—è –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏
        if (height < 1 || (moisture > 0.3 && temperature > 0.1 && height < 3)) return BiomeType.SAND

        // Mountain/Rocks - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä, —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥
        if (height > 15) return BiomeType.ROCKS

        // Forest - –¥–µ–ª–∞–µ–º –ª–µ—Å–∞ –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º–∏ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö –≤—ã—Å–æ—Ç–∞—Ö
        if (moisture > -0.1 && temperature > -0.5 && height > 4 && height < 18) return BiomeType.FOREST

        // Fields - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–≤–Ω–∏–Ω—ã –∑–∞–Ω–∏–º–∞—é—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞
        return BiomeType.FIELDS
    }

    removeChunk(chunkKey: string): void {
        const chunk = this.chunks.get(chunkKey)
        if (!chunk) return

        // Remove water surface
        this.waterManager.removeWaterSurface(chunkKey)

        // Remove chunk mesh
        this.scene.remove(chunk.mesh)
        chunk.geometry.dispose()

        // –£–¥–∞–ª—è–µ–º –æ–±–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        this.shaderManager.removeMaterial(chunk.material)
        chunk.material.dispose()
        chunk.wireframeMaterial.dispose()

        this.chunks.delete(chunkKey)
    }

    getChunks(): Map<string, TerrainChunk> {
        return this.chunks
    }

    setWireframe(enabled: boolean): void {
        this.wireframeEnabled = enabled
        this.chunks.forEach(chunk => {
            if (enabled) {
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ wireframe –º–∞—Ç–µ—Ä–∏–∞–ª
                ;(chunk.mesh as any).material = chunk.wireframeMaterial
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
                ;(chunk.mesh as any).material = chunk.material
            }
        })
        this.biomeManager.setWireframe(enabled)
    }

    dispose(): void {
        this.chunks.forEach((chunk, key) => {
            this.removeChunk(key)
        })
        this.chunks.clear()
    }
}
