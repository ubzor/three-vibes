import { ChunkGenerationRequest, ChunkGenerationResult } from './ChunkWorker'

export interface WorkerPoolConfig {
    maxWorkers: number
    workerScript: string
}

export class ChunkWorkerPool {
    private workers: Worker[] = []
    private availableWorkers: Worker[] = []
    private busyWorkers: Set<Worker> = new Set()
    private taskQueue: Array<{
        request: ChunkGenerationRequest
        resolve: (result: ChunkGenerationResult) => void
        reject: (error: Error) => void
    }> = []
    private maxWorkers: number
    private workerScript: string

    constructor(config: WorkerPoolConfig) {
        this.maxWorkers = config.maxWorkers
        this.workerScript = config.workerScript
    }

    async initialize(): Promise<void> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Workers
        if (typeof Worker === 'undefined') {
            throw new Error('Web Workers not supported in this environment')
        }

        console.log(`üîß Creating ${this.maxWorkers} workers...`)

        // –°–æ–∑–¥–∞–µ–º –ø—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤
        for (let i = 0; i < this.maxWorkers; i++) {
            try {
                const worker = this.createWorker()
                this.workers.push(worker)
                this.availableWorkers.push(worker)
                console.log(`‚úÖ Worker ${i + 1}/${this.maxWorkers} created`)
            } catch (error) {
                console.error(`‚ùå Failed to create worker ${i + 1}:`, error)
                throw error
            }
        }

        console.log(`üîß Initialized chunk worker pool with ${this.maxWorkers} workers`)
    }

    private createWorker(): Worker {
        try {
            console.log('üîÑ Creating worker with script:', this.workerScript)
            const worker = new Worker(new URL('./ChunkWorker.ts', import.meta.url), {
                type: 'module',
            })

            worker.onmessage = (e: MessageEvent<ChunkGenerationResult>) => {
                this.handleWorkerMessage(worker, e.data)
            }

            worker.onerror = error => {
                console.error('‚ùå Worker error:', error)
                this.handleWorkerError(worker, error)
            }

            worker.onmessageerror = error => {
                console.error('‚ùå Worker message error:', error)
            }

            console.log('‚úÖ Worker created successfully')
            return worker
        } catch (error) {
            console.error('‚ùå Failed to create worker:', error)
            throw error
        }
    }

    private handleWorkerMessage(worker: Worker, result: ChunkGenerationResult): void {
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä
        this.busyWorkers.delete(worker)
        this.availableWorkers.push(worker)

        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–º–∏—Å
        const taskIndex = this.taskQueue.findIndex(task => task.request.id === result.id)

        if (taskIndex !== -1) {
            const task = this.taskQueue.splice(taskIndex, 1)[0]

            if (result.success) {
                task.resolve(result)
            } else {
                task.reject(new Error(result.error || 'Chunk generation failed'))
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
        this.processNextTask()
    }

    private handleWorkerError(worker: Worker, error: ErrorEvent): void {
        console.error('Worker error:', error)

        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –∏–∑ –ø—É–ª–∞
        this.busyWorkers.delete(worker)
        const availableIndex = this.availableWorkers.indexOf(worker)
        if (availableIndex !== -1) {
            this.availableWorkers.splice(availableIndex, 1)
        }

        const workerIndex = this.workers.indexOf(worker)
        if (workerIndex !== -1) {
            this.workers.splice(workerIndex, 1)
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –≤–∑–∞–º–µ–Ω
        const newWorker = this.createWorker()
        this.workers.push(newWorker)
        this.availableWorkers.push(newWorker)

        // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –≤–æ—Ä–∫–µ—Ä–æ–º
        this.taskQueue.forEach(task => {
            task.reject(new Error('Worker failed'))
        })
        this.taskQueue.length = 0
    }

    async generateChunk(request: ChunkGenerationRequest): Promise<ChunkGenerationResult> {
        return new Promise((resolve, reject) => {
            this.taskQueue.push({ request, resolve, reject })
            this.processNextTask()
        })
    }

    private processNextTask(): void {
        if (this.taskQueue.length === 0 || this.availableWorkers.length === 0) {
            return
        }

        const worker = this.availableWorkers.pop()!
        const task = this.taskQueue.find(
            t => !this.busyWorkers.has(worker) // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤–æ—Ä–∫–µ—Ä –Ω–µ –∑–∞–Ω—è—Ç
        )

        if (!task || !worker) return

        this.busyWorkers.add(worker)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤–æ—Ä–∫–µ—Ä—É
        worker.postMessage(task.request)
    }

    cancelTask(generationId: string): boolean {
        // –ò—â–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ ID
        const taskIndex = this.taskQueue.findIndex(task => task.request.id === generationId)

        if (taskIndex !== -1) {
            const task = this.taskQueue.splice(taskIndex, 1)[0]
            task.reject(new Error(`Task ${generationId} was cancelled`))
            console.log(`‚ùå Cancelled queued task ${generationId}`)
            return true
        }

        console.log(`‚ö†Ô∏è Task ${generationId} not found in queue (may already be processing)`)
        return false
    }

    cancelOutOfRangeTasks(centerX: number, centerZ: number, maxDistance: number): number {
        let cancelledCount = 0
        const tasksToCancel: number[] = []

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
        for (let i = 0; i < this.taskQueue.length; i++) {
            const task = this.taskQueue[i]
            const dx = task.request.chunkX - centerX
            const dz = task.request.chunkZ - centerZ
            const distance = Math.sqrt(dx * dx + dz * dz)

            if (distance > maxDistance) {
                tasksToCancel.push(i)
            }
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã
        for (let i = tasksToCancel.length - 1; i >= 0; i--) {
            const taskIndex = tasksToCancel[i]
            const task = this.taskQueue.splice(taskIndex, 1)[0]
            task.reject(
                new Error(`Task for chunk (${task.request.chunkX}, ${task.request.chunkZ}) cancelled - out of range`)
            )
            cancelledCount++
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∏–ª–∏ –º–Ω–æ–≥–æ –∑–∞–¥–∞—á
        if (cancelledCount > 5) {
            console.log(`‚ùå Cancelled ${cancelledCount} out-of-range tasks from worker queue`)
        }

        return cancelledCount
    }

    getStats(): {
        totalWorkers: number
        availableWorkers: number
        busyWorkers: number
        queuedTasks: number
    } {
        return {
            totalWorkers: this.workers.length,
            availableWorkers: this.availableWorkers.length,
            busyWorkers: this.busyWorkers.size,
            queuedTasks: this.taskQueue.length,
        }
    }

    dispose(): void {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã
        this.workers.forEach(worker => {
            worker.terminate()
        })

        this.workers.length = 0
        this.availableWorkers.length = 0
        this.busyWorkers.clear()

        // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        this.taskQueue.forEach(task => {
            task.reject(new Error('Worker pool disposed'))
        })
        this.taskQueue.length = 0

        console.log('üóëÔ∏è Chunk worker pool disposed')
    }
}
