import { Perlin } from 'ts-noise'
import { GPUHeightGenerator, type HeightmapConfig } from './GPUHeightGenerator'
import * as THREE from 'three'

export class HeightGenerator {
    private perlin: Perlin
    private heightScale = 30
    private scale = 0.015
    private gpuGenerator: GPUHeightGenerator | null = null
    private renderer: THREE.WebGLRenderer | null = null

    constructor(renderer?: THREE.WebGLRenderer) {
        this.perlin = new Perlin(Math.random())
        if (renderer) {
            this.renderer = renderer
            this.initializeGPUGenerator()
        }
    }

    private async initializeGPUGenerator(): Promise<void> {
        if (!this.renderer) return

        console.log('üñ•Ô∏è Initializing GPU height generator...')

        const config: HeightmapConfig = {
            chunkSize: 64,
            resolution: 64,
            heightScale: this.heightScale,
            noiseScale: this.scale,
            seed: Math.random(),
        }

        this.gpuGenerator = new GPUHeightGenerator(this.renderer, config)
        try {
            await this.gpuGenerator.initialize()
            console.log('‚úÖ GPU height generator initialized successfully')
        } catch (error) {
            console.warn('‚ùå Failed to initialize GPU height generator:', error)
            console.warn('üìã Error details:', {
                message: error instanceof Error ? error.message : 'Unknown error',
                renderer: this.renderer ? 'Available' : 'Not available',
                webgl2: this.renderer?.getContext() instanceof WebGL2RenderingContext ? 'Supported' : 'Not supported',
            })
            this.gpuGenerator = null
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ heightmap –¥–ª—è —á–∞–Ω–∫–∞
    async generateHeightmapChunk(chunkX: number, chunkZ: number, size: number): Promise<Float32Array> {
        if (this.gpuGenerator) {
            try {
                return await this.gpuGenerator.generateHeightmapGPU(chunkX, chunkZ)
            } catch (error) {
                console.warn('GPU generation failed, falling back to CPU:', error)
            }
        }

        // Fallback –∫ CPU –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const heights = new Float32Array(size * size)
        for (let z = 0; z < size; z++) {
            for (let x = 0; x < size; x++) {
                const worldX = chunkX * size + x
                const worldZ = chunkZ * size + z
                heights[z * size + x] = this.generateHeight(worldX, worldZ)
            }
        }
        return heights
    }

    generateHeight(x: number, z: number): number {
        // –ë–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞ terrain —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–∫—Ç–∞–≤–∞–º–∏
        let baseHeight = 0
        let amplitude = 1
        let frequency = this.scale

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –≤—ã—Å–æ—Ç—É —Å multiple octaves
        for (let i = 0; i < 6; i++) {
            const noiseValue = this.perlin.get2([x * frequency, z * frequency])
            baseHeight += noiseValue * amplitude
            amplitude *= 0.5
            frequency *= 2
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–ø–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–µ features (–≥–æ—Ä—ã/—Ä–∞–≤–Ω–∏–Ω—ã)
        const mountainNoise = this.perlin.get2([x * 0.001, z * 0.001]) // –£–∫—Ä—É–ø–Ω—è–µ–º –≥–æ—Ä—ã (–±—ã–ª–æ 0.002)
        const hillNoise = this.perlin.get2([x * 0.008, z * 0.008])

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —à—É–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–ø–∞–¥–∏–Ω/–æ–∑–µ—Ä - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫—Ä—É–ø–Ω—ã–µ, —É–±–∏—Ä–∞–µ–º –º–µ–ª–∫–∏–µ
        const lakeNoise = this.perlin.get2([x * 0.002, z * 0.002]) // –ï—â–µ –∫—Ä—É–ø–Ω–µ–µ –æ–∑–µ—Ä–∞ (–±—ã–ª–æ 0.003)
        const riverNoise = this.perlin.get2([x * 0.004, z * 0.004]) // –ö—Ä—É–ø–Ω–µ–µ —Ä–µ–∫–∏ (–±—ã–ª–æ 0.006)

        // –°–æ–∑–¥–∞—ë–º –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç
        let finalHeight = baseHeight * (this.heightScale * 0.8) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–∏—Ö –≥–æ—Ä

        // –°–æ–∑–¥–∞—ë–º –≥–ª—É–±–æ–∫–∏–µ –≤–ø–∞–¥–∏–Ω—ã –¥–ª—è –æ–∑–µ—Ä/—Ä–µ–∫ - —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –Ω–∞ 50%
        if (lakeNoise < -0.75 || (riverNoise < -0.8 && lakeNoise < -0.5)) {
            const lakeFactor = lakeNoise < -0.75 ? Math.pow(Math.abs(lakeNoise + 0.75) / 0.25, 1.5) : 0
            const riverFactor =
                riverNoise < -0.8 && lakeNoise < -0.5 ? Math.pow(Math.abs(riverNoise + 0.8) / 0.2, 2) : 0
            const depthFactor = Math.max(lakeFactor, riverFactor)
            finalHeight -= depthFactor * 8 // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª—É–±–∏–Ω—É –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –≤–æ–¥–æ–µ–º–æ–≤
        }

        // –ì–æ—Ä—ã —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º –∏ —É–∫—Ä—É–ø–Ω–µ–Ω–Ω—ã–µ
        if (mountainNoise > 0.2) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä (–±—ã–ª–æ 0.3, —Å—Ç–∞–ª–æ 0.2)
            const mountainFactor = Math.pow((mountainNoise - 0.2) / 0.8, 1.2) // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–π —Ä–æ—Å—Ç
            finalHeight += mountainFactor * 60 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –≥–æ—Ä (–±—ã–ª–æ 50)
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ —Ö–æ–ª–º–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞
        finalHeight += hillNoise * 12

        // –°–æ–∑–¥–∞—ë–º –º—è–≥–∫–∏–µ –¥–æ–ª–∏–Ω—ã
        const valleyNoise = this.perlin.get2([x * 0.005, z * 0.005])
        if (valleyNoise < -0.3) {
            finalHeight *= 0.8 // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –¥–æ–ª–∏–Ω—ã
        }

        // –ü–æ–¥–Ω–∏–º–∞–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–≤–Ω–∏–Ω –≤—ã—à–µ –Ω—É–ª—è
        finalHeight += 5 // –ë–æ–ª—å—à–µ –ø–æ–¥—ä–µ–º –¥–ª—è –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏—è —Ä–∞–≤–Ω–∏–Ω

        return finalHeight
    }

    updateHeightScale(newHeightScale: number): void {
        this.heightScale = newHeightScale
        if (this.gpuGenerator) {
            this.gpuGenerator.updateConfig({ heightScale: newHeightScale })
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —à—É–º—É –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
    getNoise2D(x: number, z: number): number {
        return this.perlin.get2([x, z])
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è GPU –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    async enableGPUGeneration(chunkSize: number, resolution: number): Promise<void> {
        console.log(`üöÄ Enabling GPU generation with chunk size: ${chunkSize}, resolution: ${resolution}`)

        if (!this.renderer) {
            console.error('‚ùå Renderer is required for GPU generation')
            throw new Error('Renderer is required for GPU generation')
        }

        console.log(`üîß Enabling GPU generation with chunkSize: ${chunkSize}, resolution: ${resolution}`)

        const config: HeightmapConfig = {
            chunkSize: chunkSize,
            resolution: resolution,
            heightScale: this.heightScale,
            noiseScale: this.scale,
            seed: Math.random(),
        }

        console.log('üîß Creating GPU height generator with config:', config)
        this.gpuGenerator = new GPUHeightGenerator(this.renderer, config)
        try {
            await this.gpuGenerator.initialize()
            console.log('‚úÖ GPU generation enabled successfully')
        } catch (error) {
            console.error('‚ùå Failed to enable GPU generation:', error)
            this.gpuGenerator = null
            throw error
        }
    }

    dispose(): void {
        if (this.gpuGenerator) {
            this.gpuGenerator.dispose()
        }
    }
}
