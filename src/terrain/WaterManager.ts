import { Scene, Mesh, PlaneGeometry, MeshPhongMaterial, DoubleSide, ShaderMaterial, MeshBasicMaterial } from 'three'
import { HeightGenerator } from './HeightGenerator'
import { ShaderManager } from '@/shaders/ShaderManager'
import { globalProfiler } from '@/utils/Profiler'

interface WaterMeshData {
    mesh: Mesh
    originalMaterial: ShaderMaterial
    wireframeMaterial: MeshBasicMaterial
}

export class WaterManager {
    private scene: Scene
    private heightGenerator: HeightGenerator
    private shaderManager: ShaderManager
    private waterMeshes: Map<string, WaterMeshData> = new Map()
    private waterLevel = 0 // –ï–¥–∏–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ 0
    private wireframeEnabled = false

    constructor(scene: Scene, heightGenerator: HeightGenerator, shaderManager: ShaderManager) {
        this.scene = scene
        this.heightGenerator = heightGenerator
        this.shaderManager = shaderManager
    }

    createWaterSurface(chunkX: number, chunkZ: number, chunkSize: number): void {
        const chunkKey = `${chunkX},${chunkZ}`

        // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–¥—ã
        if (this.waterMeshes.has(chunkKey)) {
            return
        }

        // –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∏ –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:
        // –ï—Å–ª–∏ –≤ —á–∞–Ω–∫–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ç–æ—á–∫–∞ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –≤–æ–¥—ã - —Å–æ–∑–¥–∞—ë–º –≤–æ–¥–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
        let hasWaterPoints = false

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–∫—É —Ç–æ—á–µ–∫ —Å —Ö–æ—Ä–æ—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        const testResolution = 16 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        for (let testX = 0; testX <= testResolution && !hasWaterPoints; testX++) {
            for (let testZ = 0; testZ <= testResolution && !hasWaterPoints; testZ++) {
                const worldX = (testX / testResolution - 0.5) * chunkSize + chunkX * chunkSize
                const worldZ = (testZ / testResolution - 0.5) * chunkSize + chunkZ * chunkSize
                const height = this.heightGenerator.generateHeight(worldX, worldZ)

                if (height < this.waterLevel) {
                    hasWaterPoints = true
                }
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞—ë–≤ —á–∞–Ω–∫–∞ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ –≤–æ–¥–æ—ë–º–∞–º–∏
        if (!hasWaterPoints) {
            hasWaterPoints = this.checkChunkEdgesForWater(chunkX, chunkZ, chunkSize)
            // if (hasWaterPoints) {
            //     console.log(`üåä Water created via edge check for chunk (${chunkX}, ${chunkZ})`)
            // }
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ —Å–æ—Å–µ–¥–Ω–∏–µ —á–∞–Ω–∫–∏ —Å –≤–æ–¥–æ–π
        if (!hasWaterPoints) {
            hasWaterPoints = this.hasAdjacentWaterChunks(chunkX, chunkZ)
            // if (hasWaterPoints) {
            //     console.log(`üîó Water created via adjacent check for chunk (${chunkX}, ${chunkZ})`)
            // }
        }

        if (hasWaterPoints) {
            this.createWaterMesh(chunkX, chunkZ, chunkSize)
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –≤–æ–¥–æ–π
            // console.log(`üíß Water created for chunk (${chunkX}, ${chunkZ})`)
        } else {
            // console.log(`üèîÔ∏è No water needed for chunk (${chunkX}, ${chunkZ})`)
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞—ë–≤ —á–∞–Ω–∫–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –≤–æ–¥–æ—ë–º–æ–≤
    private checkChunkEdgesForWater(chunkX: number, chunkZ: number, chunkSize: number): boolean {
        const edgePoints = []
        const edgeResolution = 8

        // –õ–µ–≤—ã–π –∫—Ä–∞–π
        for (let i = 0; i <= edgeResolution; i++) {
            const worldX = chunkX * chunkSize - chunkSize * 0.5
            const worldZ = (i / edgeResolution - 0.5) * chunkSize + chunkZ * chunkSize
            edgePoints.push([worldX, worldZ])
        }

        // –ü—Ä–∞–≤—ã–π –∫—Ä–∞–π
        for (let i = 0; i <= edgeResolution; i++) {
            const worldX = chunkX * chunkSize + chunkSize * 0.5
            const worldZ = (i / edgeResolution - 0.5) * chunkSize + chunkZ * chunkSize
            edgePoints.push([worldX, worldZ])
        }

        // –í–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π
        for (let i = 0; i <= edgeResolution; i++) {
            const worldX = (i / edgeResolution - 0.5) * chunkSize + chunkX * chunkSize
            const worldZ = chunkZ * chunkSize - chunkSize * 0.5
            edgePoints.push([worldX, worldZ])
        }

        // –ù–∏–∂–Ω–∏–π –∫—Ä–∞–π
        for (let i = 0; i <= edgeResolution; i++) {
            const worldX = (i / edgeResolution - 0.5) * chunkSize + chunkX * chunkSize
            const worldZ = chunkZ * chunkSize + chunkSize * 0.5
            edgePoints.push([worldX, worldZ])
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É –∫—Ä–∞—è
        for (const [x, z] of edgePoints) {
            const height = this.heightGenerator.generateHeight(x, z)
            if (height < this.waterLevel) {
                return true
            }
        }

        return false
    }

    private hasAdjacentWaterChunks(chunkX: number, chunkZ: number): boolean {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º 8 —Å–æ—Å–µ–¥–Ω–∏—Ö —á–∞–Ω–∫–æ–≤
        const adjacentChunks = [
            [chunkX - 1, chunkZ - 1],
            [chunkX, chunkZ - 1],
            [chunkX + 1, chunkZ - 1],
            [chunkX - 1, chunkZ],
            /*[chunkX, chunkZ],*/ [chunkX + 1, chunkZ],
            [chunkX - 1, chunkZ + 1],
            [chunkX, chunkZ + 1],
            [chunkX + 1, chunkZ + 1],
        ]

        for (const [adjX, adjZ] of adjacentChunks) {
            const adjKey = `${adjX},${adjZ}`
            if (this.waterMeshes.has(adjKey)) {
                return true
            }
        }
        return false
    }

    private createWaterMesh(chunkX: number, chunkZ: number, chunkSize: number): void {
        // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –¥–ª—è –≤–æ–¥—ã
        const waterGeometry = new PlaneGeometry(chunkSize, chunkSize, 32, 32)

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–µ–π–¥–µ—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–æ–¥—ã
        const waterMaterial = this.shaderManager.createNewWaterMaterial()

        // –°–æ–∑–¥–∞–µ–º wireframe –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–æ–¥—ã (—Å–∏–Ω–∏–π)
        const wireframeMaterial = new MeshBasicMaterial({
            color: 0x0066ff,
            wireframe: true,
            transparent: true,
            opacity: 0.8,
        })

        const waterMesh = new Mesh(waterGeometry, waterMaterial)
        waterMesh.rotation.x = -Math.PI / 2
        waterMesh.position.set(chunkX * chunkSize, this.waterLevel, chunkZ * chunkSize)
        waterMesh.receiveShadow = true
        waterMesh.castShadow = false

        // –ï—Å–ª–∏ wireframe –≤–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º wireframe –º–∞—Ç–µ—Ä–∏–∞–ª
        if (this.wireframeEnabled) {
            ;(waterMesh as any).material = wireframeMaterial
        }

        this.scene.add(waterMesh)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º reference
        const chunkKey = `${chunkX},${chunkZ}`
        const waterData: WaterMeshData = {
            mesh: waterMesh,
            originalMaterial: waterMaterial,
            wireframeMaterial: wireframeMaterial,
        }
        this.waterMeshes.set(chunkKey, waterData)
    }

    removeWaterSurface(chunkKey: string): void {
        const waterData = this.waterMeshes.get(chunkKey)
        if (waterData) {
            this.scene.remove(waterData.mesh)
            if (waterData.mesh.geometry) waterData.mesh.geometry.dispose()

            // –£–¥–∞–ª—è–µ–º –æ–±–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            this.shaderManager.removeMaterial(waterData.originalMaterial)
            waterData.originalMaterial.dispose()
            waterData.wireframeMaterial.dispose()

            this.waterMeshes.delete(chunkKey)
        }
    }

    dispose(): void {
        this.waterMeshes.forEach((waterData, key) => {
            this.removeWaterSurface(key)
        })
        this.waterMeshes.clear()
    }

    setWireframe(enabled: boolean): void {
        this.wireframeEnabled = enabled
        this.waterMeshes.forEach(waterData => {
            if (enabled) {
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ wireframe –º–∞—Ç–µ—Ä–∏–∞–ª
                ;(waterData.mesh as any).material = waterData.wireframeMaterial
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
                ;(waterData.mesh as any).material = waterData.originalMaterial
            }
        })
    }
}
